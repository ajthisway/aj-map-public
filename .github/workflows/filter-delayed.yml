name: Filter Delayed GPS Points

on:
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false  # <-- disables default bot credentials

      - name: Fetch and filter delayed points
        run: |
          curl -s https://raw.githubusercontent.com/ajthisway/aj-map-live/main/locations.json -o all.json

          cat <<EOF > filter.py
          import json, time

          with open("all.json") as f:
              data = json.load(f)

          now = time.time()
          filtered = []
          iso_points = []

          for point in data:
              ts = point.get("timestamp")
              parsed_ts = None

              if isinstance(ts, str):
                  try:
                      parsed_ts = int(ts)
                  except:
                      try:
                          parsed_ts = int(time.mktime(time.strptime(ts, "%Y-%m-%dT%H:%M:%SZ")))
                      except:
                          try:
                              parsed_ts = int(time.mktime(time.strptime(ts, "%Y-%m-%dT%H:%M:%S.%fZ")))
                              iso_points.append((parsed_ts, point))  # ISO with milliseconds: thin later
                              continue  # Skip adding to filtered for now
                          except:
                              continue
              else:
                  parsed_ts = ts

              if isinstance(parsed_ts, (int, float)) and parsed_ts < now - 86400:
                  filtered.append(point)

          # Thin ISO points (those with milliseconds) based on timestamp gaps
          iso_points.sort(key=lambda x: x[0])  # sort by timestamp
          last_ts = None
          for ts, point in iso_points:
              if ts < now - 86400:
                  if last_ts is None or ts - last_ts >= 599:
                      filtered.append(point)
                      last_ts = ts

          with open("delayed_locations.json", "w") as f:
              json.dump(filtered, f, indent=2)
          EOF

          python3 filter.py

      - name: Commit and push the updated file
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          git config --global user.name "aj-map-bot"
          git config --global user.email "aj@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}
          git add delayed_locations.json
          git commit -m "Update delayed map" || echo "No changes"
          git push origin main
